// Code generated by MockGen. DO NOT EDIT.
// Source: account.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination=./mocks/account_mock.go -source=account.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "go-pismo-challenge/pkg/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountConnector is a mock of AccountConnector interface.
type MockAccountConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAccountConnectorMockRecorder
	isgomock struct{}
}

// MockAccountConnectorMockRecorder is the mock recorder for MockAccountConnector.
type MockAccountConnectorMockRecorder struct {
	mock *MockAccountConnector
}

// NewMockAccountConnector creates a new mock instance.
func NewMockAccountConnector(ctrl *gomock.Controller) *MockAccountConnector {
	mock := &MockAccountConnector{ctrl: ctrl}
	mock.recorder = &MockAccountConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountConnector) EXPECT() *MockAccountConnectorMockRecorder {
	return m.recorder
}

// CheckIdempotency mocks base method.
func (m *MockAccountConnector) CheckIdempotency(ctx context.Context, accountUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIdempotency", ctx, accountUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIdempotency indicates an expected call of CheckIdempotency.
func (mr *MockAccountConnectorMockRecorder) CheckIdempotency(ctx, accountUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIdempotency", reflect.TypeOf((*MockAccountConnector)(nil).CheckIdempotency), ctx, accountUUID)
}

// Create mocks base method.
func (m *MockAccountConnector) Create(ctx context.Context, a model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountConnectorMockRecorder) Create(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountConnector)(nil).Create), ctx, a)
}

// Get mocks base method.
func (m *MockAccountConnector) Get(ctx context.Context, uuid string) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountConnectorMockRecorder) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountConnector)(nil).Get), ctx, uuid)
}
